#+TITLE: Patches

This page is an attempt to state things familiar to programmers
using mathematical language.

Programs can be related using morphisms that correspond to
patches that will transform one program into another.

In an abstract sense, "patch" is a description of how one
program differs from another. Given two programs A and B,
a patch describes an isomorphism -- a pair of functions
f: A |-> B and r: B |-> A.  f is the forward patch, r is the reverse patch.

Operationally, a patch can be applied to A to produce B.
What's really going on is that you're using the patch
to derive the forward morphism, and applying it to A.

Given a pair of programs, they may be "diffed" to produce a patch.

Programs, together with patches, form a monoid where the unit (identity)
is the empty patch.


In source code, programmers use revision control tools like Git
to create patches from pairs of programs, and to apply them
to a program to yield another program.  Patches are represented
as text files known as "diff" files.

However, as we've seen, some pairs of programs, though different,
produce the same binary when compiled.  We say that such programs
are target-isomorphic, and are reprsentatives of a target-isomporphism class.
We'll call these "target isomophisms".

(I wanted to call them "binary-isomorphic" or "object-isomorphic", but "binary"
means something else in mathematics, as does "object".)

Some patches will turn a program A into another program in
the same binary isomorphism class.  That is, after applying
the patch and compiling, you'll still end up with the same binary.
These correspond to trivial differences like edits within comments.

The interesting patches are the ones that produce a program
in a different isomorphism class.

How could the idea of patch morphisms be extended to work
between the "target isomporphism" classes of source programs?

* Ordering relations on programs
  
We can think of patch morphisms as a way of relating programs.
We can say that program A "patches to" program B, to define
a relation "patches to".

Another interesting question is that if programs can be related 

