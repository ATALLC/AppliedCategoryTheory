#+TITLE: Notes

Here are some notes that I generated during discussions.


* ACT 1.1: Ordering of Partitions

I agree that to avoid confusion, we should first stick with the terminology
in the book: a system is a particular way of connecting points. The text is
careful to avoid using words like "set" when talking about those systems in
the first subsection.

It is the systems that are ordered with respect to one another.
The connections or points aren't ordered (at least not here).

Exercise 1.3 reveals that systems can be thought of as involving a set of
points. In fact, a system is a partition as defined in Def. 1.10, which
brings in the notion of partitioning a set A into parts, which are
specially crafted subsets of A that don't overlap and collectively don't
leave out any elements of A.

Each part is indeed a set -- a subset of A -- and the partition
is a set of sets.

One thing that might be confusing about the definition is that
it introduces yet another set P of part labels.  As the name
suggests, you can think of a label as a sticker that you can
attach to a part.  Each part gets exactly one sticker, with
no stickers left over.

This gives us a way to talk about the parts without worrying about the fact
that parts are actually (sub)sets.

A fancier way of expressing this "exhaustive" one-to-one correspondence
between parts (subsets) and labels is to say that the set of parts is
indexed by the set P of labels.

To restate what we said above about the ordering of systems:
It is the partitions that are ordered with respect to one another.
We haven't defined an ordering of the parts, either within the same
system or between parts of different systems.  So it doesn't make
sense to try to compare parts -- you can only compare entire systems.

(This is not to say that you couldn't define some ordering of parts,
maybe based on how many elements they have, but that's not what
this section is talking about.)

* Partial Order induces the finest partition

In Example 1.44 we've seen that a preorder induces a partition on its set.
You get interesting parts that have multiple elements, because
many elements can be equivalent and still be distinct.
But what about a partially-ordered set (a poset) where that's not true?

Proposition:
A partial order induces the finest partition (all singletons) on its set.

Because a partial order is also a preorder, it induces a partition on its
set.  Every element will belong to one part, by the definition of partition.

We just have to show that each part is a singleton set.

Each part is a subset whose elements are all equivalent to one another.
However, in a partial order, antisymmetry guarantees that
no two distinct elements in the poset can be equal.

Any pair of elements that we find to be equivalent are in fact equal
(identical). They're not distinct elements at all -- the "pair"
consists of the element and itself (x,x).
By reflexivity, every element is indeed related to itself.
Therefore, each part is a subset containing exactly one element -- a
singleton set.

* Random

[[http://conal.net/papers/compiling-to-categories/][Compiling to Categories]], Conal Elliot

[[https://www.logicmatters.net/resources/pdfs/Galois.pdf][The Galois Connection between Syntax and Semantics]]
might be a good introductory paper.

[[https://arxiv.org/pdf/0908.3347.pdf][A survey of graphical languages for monoidal categories]], Peter Selinger
It is well-known that the simply typed lambda-calculus is modeled by any cartesian closed category (CCC). 

[[https://github.com/epatters/Catlab.jl][Catlab]] is an experimental library for computational category theory,
written in Julia.

Overleaf
